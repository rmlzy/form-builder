import React from "react";
import _ from "lodash";
import axios from "axios";
import * as Tools from "../tools";

/**
 * 获取页面参数
 * @param name
 * @param url
 * @returns {string|null}
 */
export const getParameterByName = (name, url) => {
  if (!url) url = window.location.href;
  // eslint-disable-next-line
  name = name.replace(/[\[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
    results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return "";
  return decodeURIComponent(results[2].replace(/\+/g, " "));
};

/**
 * 扫描代码, 生成包引用
 * @param code
 * @returns {string}
 */
const genAntdImport = (code = "") => {
  const antCmpts = [
    "Button",
    "Row",
    "Col",
    "Divider",
    "Affix",
    "Breadcrumb",
    "Dropdown",
    "Menu",
    "Pagination",
    "PageHeader",
    "Steps",
    "AutoComplete",
    "Checkbox",
    "Cascader",
    "DatePicker",
    "Form",
    "InputNumber",
    "Input",
    "Mentions",
    "Rate",
    "Radio",
    "Switch",
    "Slider",
    "Select",
    "TreeSelect",
    "Transfer",
    "TimePicker",
    "Upload",
    "Avatar",
    "Badge",
    "Comment",
    "Collapse",
    "Carousel",
    "Card",
    "Calendar",
    "Descriptions",
    "Empty",
    "List",
    "Popover",
    "Statistic",
    "Tree",
    "Tooltip",
    "Timeline",
    "Tag",
    "Tabs",
    "Table",
    "Alert",
    "Drawer",
    "Modal",
    "Message",
    "Notification",
    "Progress",
    "Popconfirm",
    "Result",
    "Spin",
    "Skeleton",
    "Anchor",
    "BackTop",
  ];
  const usedCmpts = [];
  antCmpts.forEach((cmpt) => {
    if (code.includes(cmpt)) {
      usedCmpts.push(cmpt);
    }
  });
  return `import { ${usedCmpts.join(",")} } from "antd"`;
};

/**
 * 读取工具的 Meta 信息
 */
export const getToolsMeta = () => {
  const cmptNames = Object.keys(Tools).filter((name) => name.endsWith("Meta"));
  const cmptMetas = cmptNames.map((name) => Tools[name]);
  return cmptMetas;
};

/**
 * 根据配置获取工具的组件
 * @param option
 * @returns {*}
 */
export const getToolComponent = (option) => {
  const cmpt = option.component;
  return Tools[cmpt](option).component;
};

/**
 * 根据配置获取工具的字符串描述
 * @param option
 * @returns {*}
 */
export const getToolText = (option) => {
  const cmpt = option.component;
  return Tools[cmpt](option).text;
};

/**
 * 获取所有控件的名称
 * @returns {string[]}
 */
export const getToolNames = () => {
  return Object.keys(Tools).filter((name) => !name.endsWith("Edit") && !name.endsWith("Meta"));
};

/**
 * Props 转属性
 * @param {object} props
 * @returns {string}
 */
export const props2Text = (props) => {
  let texts = [];
  for (let key in props) {
    const value = props[key];
    if (value === "" || value === undefined) {
      continue;
    }
    if (_.isObject(value)) {
      texts.push(`${key}={${JSON.stringify(value)}}`);
      continue;
    }
    if (_.isArray(value)) {
      texts.push(`${key}={${JSON.stringify(value)}}`);
      continue;
    }
    // 富文本
    if (_.isString(value) && value.startsWith("<")) {
      texts.push(`${key}={${value}}`);
      continue;
    }
    if (_.isString(value)) {
      texts.push(`${key}="${value}"`);
    } else {
      texts.push(`${key}={${value}}`);
    }
  }
  return texts.join(" ");
};

/**
 * Schema 转代码
 * @param schema
 * @returns {string}
 */
export const schema2code = (schema) => {
  const codes = [];
  schema.forEach((block) => {
    const code = getToolText(block);
    codes.push(code);
  });
  codes.unshift(`<Form layout="vertical">`);
  codes.push(`</Form>`);
  return genClassCode(codes.join("\n"));
};

/**
 * 生成配置规则
 * @param required
 * @returns {any}
 */
export const genRules = ({ required }) => {
  let rules = [];
  if (required) {
    rules.push({ required: true, message: "必填项" });
  }
  return rules;
};

export const genDangerHtml = (text) => {
  return text ? <div dangerouslySetInnerHTML={{ __html: text }} /> : "";
};

/**
 * 生成类风格的代码
 * @param code
 * @returns {string}
 */
export const genClassCode = (code) => {
  const importStr = genAntdImport(code);
  return `
/**
 * This file generated by https://github.com/rmlzy/form-builder
 */
import React from "react";
import PropTypes from 'prop-types';
${importStr}

export default class $COMPONENT$ extends React.Component {
  static defaultProps = {
  };
  
  static propTypes = {
  };
  
  state = {
  };
  
  componentWillMount() {
  }
  
  componentDidMount() {
  }

  render() {
    return ${code}
  }
}`;
};

/**
 * 生成函数风格的代码
 * @param code
 * @returns {string}
 */
export const genFuncCode = (code) => {
  const importStr = genAntdImport(code);
  return `
/**
 * This file generated by https://github.com/rmlzy/form-builder
 */
import React from "react";
${importStr}

const AwesomeForm = () => {
  return ${code}
}

export default AwesomeForm;`;
};

export const findAndRemove = (schema, uuid) => {
  schema = _.cloneDeep(schema);
  schema = schema.filter((block) => block.uuid !== uuid);
  schema = schema.map((block) => {
    if (_.isArray(block.childes)) {
      block.childes = block.childes.filter((col) => col.uuid !== uuid);
      block.childes = block.childes.map((col) => {
        if (_.isArray(col.childes)) {
          col.childes = col.childes.filter((cmpt) => cmpt.uuid !== uuid);
        }
        return col;
      });
    }
    return block;
  });
  return schema;
};

export const findAndEdit = (schema, uuid, newData) => {
  schema = _.cloneDeep(schema);
  schema = schema.map((block) => {
    if (block.uuid === uuid) {
      block = newData;
    }
    if (block.childes) {
      block.childes = (block.childes || []).map((col) => {
        if (col.uuid === uuid) {
          col = newData;
        }
        if (col.childes) {
          col.childes = (col.childes || []).map((cmpt) => {
            if (cmpt.uuid === uuid) {
              cmpt = newData;
            }
            return cmpt;
          });
        }
        return col;
      });
    }
    return block;
  });
  return schema;
};

export const formatCode = (schema) => {
  const code = schema2code(schema);
  return axios({
    method: "POST",
    url: "/api/builder/format",
    data: { code },
  }).then((res) => res.data);
};

export const save = async (schema) => {
  const code = schema2code(schema);
  const token = getParameterByName("token");
  if (!token) {
    return Promise.reject(new Error("未登录"));
  }
  return axios({
    method: "POST",
    url: "/api/builder/save",
    data: {
      schema,
      code,
      token,
    },
  }).then((res) => res.data);
};
